-- Generated by CSharp.lua Compiler
local System = System
local SystemReflection = System.Reflection
local VoidSharp
local VoidSharpExample
local VoidSharpExampleORM
local Attributes
local QueryTypes
local Serializers
local VoidSharpExampleUtilities
System.import(function (out)
  VoidSharp = out.VoidSharp
  VoidSharpExample = out.VoidSharpExample
  VoidSharpExampleORM = VoidSharpExample.ORM
  Attributes = VoidSharpExample.ORM.Attributes
  QueryTypes = VoidSharpExample.ORM.QueryTypes
  Serializers = VoidSharpExample.ORM.Serializers
  VoidSharpExampleUtilities = VoidSharpExample.Utilities
end)
System.namespace("VoidSharpExample.ORM", function (namespace)
  namespace.class("Database", function (namespace)
    local Connect, AddSerializers, CreateTables, Query, Select, Update, Alter, Delete, 
    Insert, Drop, Replace, internal, __ctor1__, __ctor2__
    internal = function (this)
      this.DatabaseCredentials = System.default(VoidSharpExampleORM.DatabaseCredentials)
    end
    __ctor1__ = function (this, databaseDriver)
      internal(this)
      this.DatabaseDriver = databaseDriver

      AddSerializers(this)
    end
    __ctor2__ = function (this, databaseDriver, databaseCredentials)
      internal(this)
      this.DatabaseDriver = databaseDriver
      this.DatabaseCredentials = databaseCredentials

      AddSerializers(this)
    end
    -- <summary>
    -- Connects to the database
    -- </summary>
    -- <exception cref="Exception">Thrown when the connection attempt is unsuccessful.</exception>
    Connect = function (this)
      return System.async(function (async, this)
        if System.is(this.DatabaseDriver, VoidSharp.MySQLoo) then
          local mySqloo = System.cast(VoidSharp.MySQLoo, this.DatabaseDriver)

          VoidSharpExampleUtilities.Logger.LogInfo("Connecting to MySQL database...", "Database")
          local result = async:await(mySqloo:Connect(this.DatabaseCredentials))

          if result.HasFailed then
            System.throw(System.Exception("Couldn't connect to MySQL database! Error: " .. result.Error))
          end

          VoidSharpExampleUtilities.Logger.LogInfo("Successfully connected to MySQL database!", "Database")
        elseif System.is(this.DatabaseDriver, VoidSharp.SQLite) then
          VoidSharpExampleUtilities.Logger.LogInfo("Initialized local SQLite database instance!", "Database")
        end

        CreateTables(this)
      end, nil, this)
    end
    -- <summary>
    -- Adds all the serializers that translate the object into an SQL string.
    -- </summary>
    AddSerializers = function (this)
      VoidSharpExampleORM.SerializerMap.RegisterSerializer(System.DateTime, Serializers.DateTimeSerializer)
      VoidSharpExampleORM.SerializerMap.RegisterSerializer(System.String, Serializers.StringSerializer)
      VoidSharpExampleORM.SerializerMap.RegisterSerializer(System.Int32, Serializers.IntegerSerializer)
      VoidSharpExampleORM.SerializerMap.RegisterSerializer(VoidSharp.Color, Serializers.ColorSerializer)
      VoidSharpExampleORM.SerializerMap.RegisterSerializer(System.Boolean, Serializers.BoolSerializer)
    end
    -- <summary>
    -- Creates all the tables from Models.
    -- </summary>
    CreateTables = function (this)
      local createQueryType = QueryTypes.CreateQueryType(this)

      local assembly = SystemReflection.Assembly.GetAssembly(System.typeof(VoidSharpExample.Program))

      if assembly == nil then
        System.throw(System.Exception("Entry assembly not found. Could not find ORM models."))
      end

      for _, type in System.each(assembly:GetExportedTypes()) do
        if #type:GetCustomAttributes(System.typeof(Attributes.TableAttribute), true) > 0 then
          local query = createQueryType:GenerateQuery(type)
          Query(this, query, System.Object):ContinueWith(function (x)
          end)
        end
      end
    end
    -- <summary>
    -- Performs an SQL query on the Database directly. This is used internally, but can be also used
    -- </summary>
    -- <param name="query">The SQL Query</param>
    -- <returns>DatabaseResult</returns>
    Query = function (this, query, T)
      return System.async(function (async, this, query, T)
        local data = async:await(this.DatabaseDriver:Query(query))
        return VoidSharpExampleORM.DatabaseResult_1(T)(data)
      end, nil, this, query, T)
    end
    -- <summary>
    -- Selects rows from the Database.
    -- </summary>
    -- <typeparam name="T">Wanted class</typeparam>
    -- <returns>SelectQueryType</returns>
    Select = function (this, T)
      return QueryTypes.SelectQueryType_1(T)(this)
    end
    -- <summary>
    -- Updates one row in the database.
    -- </summary>
    -- <param name="obj">The changed object.</param>
    -- <returns>UpdateQueryType</returns>
    Update = function (this, obj, T)
      local updateQueryType = QueryTypes.UpdateQueryType_1(T)(this)
      return updateQueryType:Update1(obj)
    end
    -- <summary>
    -- Alters a database model - should be only used in migrations, nowhere else!
    -- </summary>
    Alter = function (this, T)
      return QueryTypes.AlterQueryType_1(T)(this)
    end
    -- <summary>
    -- Deletes row(s) from the database.
    -- </summary>
    Delete = function (this, T)
      return QueryTypes.DeleteQueryType_1(T)(this)
    end
    -- <summary>
    -- Inserts an object into the database.
    -- </summary>
    -- <param name="obj">The object to insert.</param>
    -- <typeparam name="T">The object class.</typeparam>
    -- <returns>InsertQueryType</returns>
    Insert = function (this, obj, T)
      local insertQueryType = QueryTypes.InsertQueryType_1(T)(this)
      return insertQueryType:Insert1(obj, false)
    end
    -- <summary>
    -- Drops a table from the database. Should be ONLY used in migrations.
    -- </summary>
    Drop = function (this, T)
      return QueryTypes.DropQueryType_1(T)(this)
    end
    -- <summary>
    -- Replaces an object if exists or inserts a new row. (based on primary key)
    -- </summary>
    Replace = function (this, obj, T)
      local insertQueryType = QueryTypes.InsertQueryType_1(T)(this)
      return insertQueryType:Replace(obj)
    end
    return {
      Connect = Connect,
      Query = Query,
      Select = Select,
      Update = Update,
      Alter = Alter,
      Delete = Delete,
      Insert = Insert,
      Drop = Drop,
      Replace = Replace,
      __ctor__ = {
        __ctor1__,
        __ctor2__
      }
    }
  end)
end)
