-- Generated by CSharp.lua Compiler
local System = System
local ListString = System.List(System.String)
local Attributes
local Specifiers
local ListAlterSpecifier
System.import(function (out)
  Attributes = VoidSharpExample.ORM.Attributes
  Specifiers = VoidSharpExample.ORM.Specifiers
  ListAlterSpecifier = System.List(Specifiers.AlterSpecifier)
end)
System.namespace("VoidSharpExample.ORM.QueryTypes", function (namespace)
  namespace.class("AlterQueryType_1", function (namespace)
    return function (T)
      local AddColumn, GenerateQuery, Execute, __ctor__
      __ctor__ = function (this, database)
        System.base(this).__ctor__(this, database)
        this.AddColumns = ListAlterSpecifier()
      end
      AddColumn = function (this, name, dataType)
        local specifier = Specifiers.AlterSpecifier(name, dataType)
        this.AddColumns:Add(specifier)

        return this
      end
      GenerateQuery = function (this, type)
        local tableName = Attributes.TableAttribute.GetAttributeTable(type)

        local stringBuilder = System.StringBuilder("ALTER TABLE " .. tableName .. " ")
        local columnStrings = ListString()

        for _, specifier in System.each(this.AddColumns) do
          columnStrings:Add("ADD COLUMN `" .. specifier:getName() .. "` " .. System.toString(specifier:getDataType()))
        end

        stringBuilder:Append(System.String.JoinEnumerable(", ", columnStrings) .. ";")
        return stringBuilder:ToString()
      end
      Execute = function (this)
        return System.async(function (async, this)
          local query = GenerateQuery(this, System.typeof(T))
          async:await(this.Database:Query(query, T))
        end, nil, this)
      end
      return {
        base = function (out)
          return {
            out.VoidSharpExample.ORM.QueryTypes.QueryType
          }
        end,
        AddColumn = AddColumn,
        GenerateQuery = GenerateQuery,
        Execute = Execute,
        __ctor__ = __ctor__
      }
    end
  end)
end)
