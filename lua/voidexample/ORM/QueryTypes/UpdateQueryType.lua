-- Generated by CSharp.lua Compiler
local System = System
local ListString = System.List(System.String)
local VoidSharpExampleORM
local Attributes
local Specifiers
local ListInsertSpecifier
System.import(function (out)
  VoidSharpExampleORM = VoidSharpExample.ORM
  Attributes = VoidSharpExample.ORM.Attributes
  Specifiers = VoidSharpExample.ORM.Specifiers
  ListInsertSpecifier = System.List(Specifiers.InsertSpecifier)
end)
System.namespace("VoidSharpExample.ORM.QueryTypes", function (namespace)
  namespace.class("UpdateQueryType_1", function (namespace)
    return function (T)
      local Update, Update1, GenerateQuery, Execute, __ctor__
      __ctor__ = function (this, database)
        System.base(this).__ctor__(this, database)
        this.InsertSpecifiers = ListInsertSpecifier()
      end
      Update = function (this, column, value)
        local specifier = Specifiers.InsertSpecifier(column, value)
        this.InsertSpecifiers:Add(specifier)

        return this
      end
      Update1 = function (this, obj)
        local properties = obj:GetType():GetProperties()
        for _, property in System.each(properties) do
          local propertyName = property:getName()
          local value = property:GetValue(obj)

          Update(this, propertyName, value)
        end

        return this
      end
      GenerateQuery = function (this, type)
        local tableName = Attributes.TableAttribute.GetAttributeTable(type)
        local stringBuilder = System.StringBuilder("UPDATE " .. tableName .. " SET ")

        local updateStatements = ListString()
        local primaryKeys = ListString()

        for _, specifier in System.each(this.InsertSpecifiers) do
          local propertyInfo = type:GetProperty(specifier:getKey())
          if propertyInfo == nil then
            System.throw(System.Exception("Tried to select a non-existing column!"))
          end

          local default, serializer = VoidSharpExampleORM.SerializerMap.Serializers:TryGetValue(propertyInfo:getPropertyType())
          if not default then
            System.throw(System.Exception("VoidORM can't serialize the type " .. propertyInfo:getPropertyType():getName() .. "!"))
          end

          local strValue = serializer:Serialize(specifier:getValue(), this.Database.DatabaseDriver)

          local isPrimaryKey = Attributes.PrimaryKeyAttribute.IsPrimaryKey(propertyInfo)
          if isPrimaryKey then
            primaryKeys:Add("`" .. specifier:getKey() .. "` = " .. strValue)
          else
            updateStatements:Add("`" .. specifier:getKey() .. "` = " .. strValue)
          end
        end

        stringBuilder:Append(System.String.JoinEnumerable(", ", updateStatements))
        stringBuilder:Append(" WHERE " .. System.String.JoinEnumerable(" AND ", primaryKeys))
        stringBuilder:Append(";")

        return stringBuilder:ToString()
      end
      Execute = function (this)
        return System.async(function (async, this)
          local query = GenerateQuery(this, System.typeof(T))
          async:await(this.Database:Query(query, T))
        end, nil, this)
      end
      return {
        base = function (out)
          return {
            out.VoidSharpExample.ORM.QueryTypes.QueryType
          }
        end,
        Update = Update,
        Update1 = Update1,
        GenerateQuery = GenerateQuery,
        Execute = Execute,
        __ctor__ = __ctor__
      }
    end
  end)
end)
