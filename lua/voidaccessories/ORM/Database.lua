-- Generated by CSharp.lua Compiler
local System = System
local SystemReflection = System.Reflection
local VoidAccessories
local VoidAccessoriesORM
local VoidAccessoriesAttributes
local VoidAccessoriesQueryTypes
local Serializers
local VoidAccessoriesUtilities
local VoidSharp
local VoidSharpDarkRP
System.import(function (out)
  VoidAccessories = out.VoidAccessories
  VoidAccessoriesORM = VoidAccessories.ORM
  VoidAccessoriesAttributes = VoidAccessories.ORM.Attributes
  VoidAccessoriesQueryTypes = VoidAccessories.ORM.QueryTypes
  Serializers = VoidAccessories.ORM.Serializers
  VoidAccessoriesUtilities = VoidAccessories.Utilities
  VoidSharp = out.VoidSharp
  VoidSharpDarkRP = VoidSharp.DarkRP
end)
System.namespace("VoidAccessories.ORM", function (namespace)
  namespace.class("Database", function (namespace)
    local Connect, AddSerializers, CreateTables, Query, Select, Update, Alter, Delete, 
    Insert, Drop, Replace, internal, __ctor1__, __ctor2__
    internal = function (this)
      this.DatabaseCredentials = System.default(VoidAccessoriesORM.DatabaseCredentials)
    end
    __ctor1__ = function (this, databaseDriver)
      internal(this)
      this.DatabaseDriver = databaseDriver

      AddSerializers(this)
    end
    __ctor2__ = function (this, databaseDriver, databaseCredentials)
      internal(this)
      this.DatabaseDriver = databaseDriver
      this.DatabaseCredentials = databaseCredentials

      AddSerializers(this)
    end
    -- <summary>
    -- Connects to the database
    -- </summary>
    -- <exception cref="Exception">Thrown when the connection attempt is unsuccessful.</exception>
    Connect = function (this)
      return System.async(function (async, this)
        if System.is(this.DatabaseDriver, VoidSharp.MySQLoo) then
          local mySqloo = System.cast(VoidSharp.MySQLoo, this.DatabaseDriver)

          VoidAccessoriesUtilities.Logger.LogInfo("Connecting to MySQL database...", "Database")
          local result = async:await(mySqloo:Connect(this.DatabaseCredentials))

          if result.HasFailed then
            System.throw(System.Exception("Couldn't connect to MySQL database! Error: " .. result.Error))
          end

          VoidAccessoriesUtilities.Logger.LogInfo("Successfully connected to MySQL database!", "Database")
        elseif System.is(this.DatabaseDriver, VoidSharp.SQLite) then
          VoidAccessoriesUtilities.Logger.LogInfo("Initialized local SQLite database instance!", "Database")
        end

        CreateTables(this)
      end, nil, this)
    end
    -- <summary>
    -- Adds all the serializers that translate the object into an SQL string.
    -- </summary>
    AddSerializers = function (this)
      VoidAccessoriesORM.SerializerMap.RegisterSerializer(System.DateTime, Serializers.DateTimeSerializer)
      VoidAccessoriesORM.SerializerMap.RegisterSerializer(System.String, Serializers.StringSerializer)
      VoidAccessoriesORM.SerializerMap.RegisterSerializer(System.Int32, Serializers.IntegerSerializer)
      VoidAccessoriesORM.SerializerMap.RegisterSerializer(VoidSharp.Color, Serializers.ColorSerializer)
      VoidAccessoriesORM.SerializerMap.RegisterSerializer(System.Boolean, Serializers.BoolSerializer)
      VoidAccessoriesORM.SerializerMap.RegisterSerializer(VoidSharpDarkRP.Job, Serializers.JobSerializer)
      VoidAccessoriesORM.SerializerMap.RegisterSerializer(System.Object, Serializers.DynamicSerializer)
    end
    -- <summary>
    -- Creates all the tables from Models.
    -- </summary>
    CreateTables = function (this)
      local createQueryType = VoidAccessoriesQueryTypes.CreateQueryType(this)

      local assembly = SystemReflection.Assembly.GetAssembly(System.typeof(VoidAccessories.Program))

      if assembly == nil then
        System.throw(System.Exception("Entry assembly not found. Could not find ORM models."))
      end

      for _, type in System.each(assembly:GetExportedTypes()) do
        if #type:GetCustomAttributes(System.typeof(VoidAccessoriesAttributes.TableAttribute), true) > 0 then
          local query = createQueryType:GenerateQuery(type)
          Query(this, query, System.Object):ContinueWith(function (x)
          end)
        end
      end
    end
    -- <summary>
    -- Performs an SQL query on the Database directly. This is used internally, but can be also used
    -- </summary>
    -- <param name="query">The SQL Query</param>
    -- <returns>DatabaseResult</returns>
    Query = function (this, query, T)
      return System.async(function (async, this, query, T)
        local data = async:await(this.DatabaseDriver:Query(query))
        return VoidAccessoriesORM.DatabaseResult_1(T)(data)
      end, nil, this, query, T)
    end
    -- <summary>
    -- Selects rows from the Database.
    -- </summary>
    -- <typeparam name="T">Wanted class</typeparam>
    -- <returns>SelectQueryType</returns>
    Select = function (this, T)
      return VoidAccessoriesQueryTypes.SelectQueryType_1(T)(this)
    end
    -- <summary>
    -- Updates one row in the database.
    -- </summary>
    -- <param name="obj">The changed object.</param>
    -- <returns>UpdateQueryType</returns>
    Update = function (this, obj, T)
      local updateQueryType = VoidAccessoriesQueryTypes.UpdateQueryType_1(T)(this)
      return updateQueryType:Update1(obj)
    end
    -- <summary>
    -- Alters a database model - should be only used in migrations, nowhere else!
    -- </summary>
    Alter = function (this, T)
      return VoidAccessoriesQueryTypes.AlterQueryType_1(T)(this)
    end
    -- <summary>
    -- Deletes row(s) from the database.
    -- </summary>
    Delete = function (this, T)
      return VoidAccessoriesQueryTypes.DeleteQueryType_1(T)(this)
    end
    -- <summary>
    -- Inserts an object into the database.
    -- </summary>
    -- <param name="obj">The object to insert.</param>
    -- <typeparam name="T">The object class.</typeparam>
    -- <returns>InsertQueryType</returns>
    Insert = function (this, obj, T)
      local insertQueryType = VoidAccessoriesQueryTypes.InsertQueryType_1(T)(this)
      return insertQueryType:Insert1(obj, false)
    end
    -- <summary>
    -- Drops a table from the database. Should be ONLY used in migrations.
    -- </summary>
    Drop = function (this, T)
      return VoidAccessoriesQueryTypes.DropQueryType_1(T)(this)
    end
    -- <summary>
    -- Replaces an object if exists or inserts a new row. (based on primary key)
    -- </summary>
    Replace = function (this, obj, T)
      local insertQueryType = VoidAccessoriesQueryTypes.InsertQueryType_1(T)(this)
      return insertQueryType:Replace(obj)
    end
    return {
      Connect = Connect,
      Query = Query,
      Select = Select,
      Update = Update,
      Alter = Alter,
      Delete = Delete,
      Insert = Insert,
      Drop = Drop,
      Replace = Replace,
      __ctor__ = {
        __ctor1__,
        __ctor2__
      },
      __metadata__ = function (out)
        return {
          properties = {
            { "DatabaseCredentials", 0x1, out.VoidAccessories.ORM.DatabaseCredentials },
            { "DatabaseDriver", 0x6, out.VoidSharp.IDatabaseDriver }
          },
          methods = {
            { ".ctor", 0x106, __ctor1__, out.VoidSharp.IDatabaseDriver },
            { ".ctor", 0x206, __ctor2__, out.VoidSharp.IDatabaseDriver, out.VoidAccessories.ORM.DatabaseCredentials },
            { "AddSerializers", 0x1, AddSerializers },
            { "Alter", 0x10086, Alter, function (T) return out.VoidAccessories.ORM.QueryTypes.AlterQueryType_1(T) end },
            { "Connect", 0x86, Connect, System.Task },
            { "CreateTables", 0x1, CreateTables },
            { "Delete", 0x10086, Delete, function (T) return out.VoidAccessories.ORM.QueryTypes.DeleteQueryType_1(T) end },
            { "Drop", 0x10086, Drop, function (T) return out.VoidAccessories.ORM.QueryTypes.DropQueryType_1(T) end },
            { "Insert", 0x10186, Insert, function (T) return System.Object, out.VoidAccessories.ORM.QueryTypes.InsertQueryType_1(T) end },
            { "Query", 0x10186, Query, function (T) return System.String, System.Task end },
            { "Replace", 0x10186, Replace, function (T) return System.Object, out.VoidAccessories.ORM.QueryTypes.InsertQueryType_1(T) end },
            { "Select", 0x10086, Select, function (T) return out.VoidAccessories.ORM.QueryTypes.SelectQueryType_1(T) end },
            { "Update", 0x10186, Update, function (T) return System.Object, out.VoidAccessories.ORM.QueryTypes.UpdateQueryType_1(T) end }
          },
          class = { 0x6 }
        }
      end
    }
  end)
end)
