-- Generated by CSharp.lua Compiler
local System = System
local ListString = System.List(System.String)
local VoidAccessoriesORM
local VoidAccessoriesAttributes
local VoidAccessoriesSpecifiers
local ListInsertSpecifier
System.import(function (out)
  VoidAccessoriesORM = VoidAccessories.ORM
  VoidAccessoriesAttributes = VoidAccessories.ORM.Attributes
  VoidAccessoriesSpecifiers = VoidAccessories.ORM.Specifiers
  ListInsertSpecifier = System.List(VoidAccessoriesSpecifiers.InsertSpecifier)
end)
System.namespace("VoidAccessories.ORM.QueryTypes", function (namespace)
  namespace.class("InsertQueryType_1", function (namespace)
    return function (T)
      local Insert, Replace, Insert1, GenerateQuery, Execute, class, __ctor__
      __ctor__ = function (this, database)
        System.base(this).__ctor__(this, database)
        this.InsertSpecifiers = ListInsertSpecifier()
      end
      Insert = function (this, column, value)
        local specifier = VoidAccessoriesSpecifiers.InsertSpecifier(column, value)
        this.InsertSpecifiers:Add(specifier)

        return this
      end
      Replace = function (this, obj)
        return Insert1(this, obj, true)
      end
      Insert1 = function (this, obj, replace)
        local properties = obj:GetType():GetProperties()
        for _, property in System.each(properties) do
          local propertyName = property:getName()

          local value = property:GetValue(obj)
          local isAutoincrement = VoidAccessoriesAttributes.AutoIncrementAttribute.IsAutoIncrement(property)

          if value ~= nil and not isAutoincrement then
            Insert(this, propertyName, value)
          end
        end

        if replace then
          this.ShouldReplace = true
        end

        return this
      end
      GenerateQuery = function (this, type)
        local tableName = VoidAccessoriesAttributes.TableAttribute.GetAttributeTable(type)
        local insertType = this.ShouldReplace and "REPLACE" or "INSERT"
        local stringBuilder = System.StringBuilder(insertType .. " INTO " .. tableName .. " (")

        local columnNames = ListString()
        local values = ListString()

        for _, specifier in System.each(this.InsertSpecifiers) do
          local propertyInfo = type:GetProperty(specifier:getKey())
          if propertyInfo == nil then
            System.throw(System.Exception("Tried to select a non-existing column!"))
          end

          columnNames:Add("`" .. specifier:getKey() .. "`")

          local default, serializer = VoidAccessoriesORM.SerializerMap.Serializers:TryGetValue(propertyInfo:getPropertyType())
          if not default then
            System.throw(System.Exception("VoidORM can't serialize the type " .. propertyInfo:getPropertyType():getName() .. "!"))
          end

          local strValue = serializer:Serialize(specifier:getValue(), this.Database.DatabaseDriver)
          values:Add(strValue)
        end

        stringBuilder:Append(System.String.JoinEnumerable(", ", columnNames))
        stringBuilder:Append(")")

        stringBuilder:Append(" VALUES (")
        stringBuilder:Append(System.String.JoinEnumerable(", ", values))
        stringBuilder:Append(");")

        return stringBuilder:ToString()
      end
      Execute = function (this)
        return System.async(function (async, this)
          local query = GenerateQuery(this, System.typeof(T))
          async:await(this.Database:Query(query, T))
        end, nil, this)
      end
      class = {
        base = function (out)
          return {
            out.VoidAccessories.ORM.QueryTypes.QueryType
          }
        end,
        ShouldReplace = false,
        Insert = Insert,
        Replace = Replace,
        Insert1 = Insert1,
        GenerateQuery = GenerateQuery,
        Execute = Execute,
        __ctor__ = __ctor__,
        __metadata__ = function (out)
          return {
            properties = {
              { "InsertSpecifiers", 0x6, System.List(out.VoidAccessories.ORM.Specifiers.InsertSpecifier) },
              { "ShouldReplace", 0x1, System.Boolean }
            },
            methods = {
              { ".ctor", 0x106, nil, out.VoidAccessories.ORM.Database },
              { "Execute", 0x86, Execute, System.Task },
              { "GenerateQuery", 0x186, GenerateQuery, System.Type, System.String },
              { "Insert", 0x286, Insert, System.String, System.Object, class },
              { "Insert", 0x286, Insert1, System.Object, System.Boolean, class },
              { "Replace", 0x186, Replace, System.Object, class }
            },
            class = { 0x106, T }
          }
        end
      }
      return class
    end
  end)
end)
