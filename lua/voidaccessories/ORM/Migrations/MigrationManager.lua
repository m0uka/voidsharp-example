-- Generated by CSharp.lua Compiler
local System = System
local Linq = System.Linq.Enumerable
local VoidAccessoriesMigrations
local VoidAccessoriesModels
local VoidAccessoriesUtilities
System.import(function (out)
  VoidAccessoriesMigrations = VoidAccessories.Migrations
  VoidAccessoriesModels = VoidAccessories.Models
  VoidAccessoriesUtilities = VoidAccessories.Utilities
end)
System.namespace("VoidAccessories.Migrations", function (namespace)
  namespace.class("MigrationManager", function (namespace)
    local UpdateMigrations, GetLatestMigrationVersion, GetLatestMigrationTimesUpdated, UpdateMigrationVersion
    -- <summary>
    -- Updates the database to the latest migration.
    -- </summary>
    -- <param name="database">The database conenction.</param>
    -- <returns></returns>
    UpdateMigrations = function (this, database)
      return System.async(function (async, this, database)
        this.CurrentVersion = async:await(GetLatestMigrationVersion(this, database))

        local migrations = Linq.ToList(Linq.Select(Linq.Where(System.typeof(VoidAccessoriesMigrations.Migration):getAssembly():GetExportedTypes(), function (t)
          return t:IsSubclassOf(System.typeof(VoidAccessoriesMigrations.Migration))
        end), function (t)
          return System.cast(VoidAccessoriesMigrations.Migration, System.Activator.CreateInstance(t))
        end, VoidAccessoriesMigrations.Migration))

        local highestVersion = 0
        for _, migration in System.each(migrations) do
          local continueLoop
          repeat
            if migration:getVersion() <= this.CurrentVersion then
              continueLoop = true
              break
            end

            local migrationName = migration:GetType():getName()

            VoidAccessoriesUtilities.Logger.LogInfo("Applying migration name " .. migrationName .. "!", "Migrations")
            async:await(migration:Up(database))
            VoidAccessoriesUtilities.Logger.LogInfo("Applied migration " .. migrationName .. "!", "Migrations")

            if migration:getVersion() > highestVersion then
              highestVersion = migration:getVersion()
            end
            continueLoop = true
          until 1
          if not continueLoop then
            break
          end
        end

        if highestVersion ~= 0 then
          this.CurrentVersion = highestVersion
          async:await(UpdateMigrationVersion(this, database))
        end
      end, nil, this, database)
    end
    -- <summary>
    -- Returns the latest migration version.
    -- </summary>
    -- <param name="database"></param>
    -- <returns></returns>
    GetLatestMigrationVersion = function (this, database)
      return System.async(function (async, this, database)
        local migrationVersion = async:await(database:Select(VoidAccessoriesModels.MigrationVersion):First())
        local default = migrationVersion
        if default ~= nil then
          default = default.Version
        end
        return default or 0
      end, nil, this, database)
    end
    GetLatestMigrationTimesUpdated = function (this, database)
      return System.async(function (async, this, database)
        local migrationVersion = async:await(database:Select(VoidAccessoriesModels.MigrationVersion):First())
        local default = migrationVersion
        if default ~= nil then
          default = default.TimesUpdated
        end
        return default or 0
      end, nil, this, database)
    end
    UpdateMigrationVersion = function (this, database)
      return System.async(function (async, this, database)
        local timesUpdated = async:await(GetLatestMigrationTimesUpdated(this, database))
        local default = VoidAccessoriesModels.MigrationVersion()
        default.Id = "VoidAccessories"
        default.Version = this.CurrentVersion
        default.TimesUpdated = timesUpdated + 1
        local migrationVersion = default

        async:await(database:Replace(migrationVersion, VoidAccessoriesModels.MigrationVersion):Execute())
        VoidAccessoriesUtilities.Logger.LogInfo("Successfully updated migration version to " .. this.CurrentVersion .. "!", "Migrations")
      end, nil, this, database)
    end
    return {
      CurrentVersion = 0,
      UpdateMigrations = UpdateMigrations,
      __metadata__ = function (out)
        return {
          properties = {
            { "CurrentVersion", 0x6, System.Int32 }
          },
          methods = {
            { "GetLatestMigrationTimesUpdated", 0x181, GetLatestMigrationTimesUpdated, out.VoidAccessories.ORM.Database, System.Task },
            { "GetLatestMigrationVersion", 0x181, GetLatestMigrationVersion, out.VoidAccessories.ORM.Database, System.Task },
            { "UpdateMigrations", 0x186, UpdateMigrations, out.VoidAccessories.ORM.Database, System.Task },
            { "UpdateMigrationVersion", 0x181, UpdateMigrationVersion, out.VoidAccessories.ORM.Database, System.Task }
          },
          class = { 0x6 }
        }
      end
    }
  end)
end)
