-- Generated by CSharp.lua Compiler
local System = System
local Linq = System.Linq.Enumerable
local VoidAccessoriesNetworking
local Serializers
local VoidSharp
local VoidSharpDarkRP
System.import(function (out)
  VoidAccessoriesNetworking = VoidAccessories.Networking
  Serializers = VoidAccessories.Networking.Serializers
  VoidSharp = out.VoidSharp
  VoidSharpDarkRP = VoidSharp.DarkRP
end)
System.namespace("VoidAccessories.Networking", function (namespace)
  namespace.class("DataSerializer", function (namespace)
    local Write, Read, Read1, WriteSingle, ReadSingle, RegisterSerializers
    Write = function (this, value, T)
      local writer = VoidAccessoriesNetworking.NetworkWriter()
      for _, property in System.each(System.typeof(T):GetProperties()) do
        WriteSingle(this, writer, property:getPropertyType(), property:GetValue(value))
      end
    end
    Read = function (this, type)
      local readClass = System.Activator.CreateInstance(type)
      local reader = VoidAccessoriesNetworking.NetworkReader()
      for _, property in System.each(type:GetProperties()) do
        local val = ReadSingle(this, reader, property:getPropertyType())

        local propInfo = Linq.FirstOrDefault(type:GetProperties(), function (x)
          return x:getName() == property:getName()
        end)
        local default = propInfo
        if default ~= nil then
          default:SetValue(readClass, val)
        end
      end
      return readClass
    end
    Read1 = function (this, T)
      local readClass = T()

      local reader = VoidAccessoriesNetworking.NetworkReader()
      for _, property in System.each(System.typeof(T):GetFields()) do
        local val = ReadSingle(this, reader, property:getFieldType())

        local propInfo = Linq.FirstOrDefault(System.typeof(T):GetProperties(), function (x)
          return x:getName() == property:getName()
        end)
        local default = propInfo
        if default ~= nil then
          default:SetValue(readClass, val)
        end
      end

      return readClass
    end
    WriteSingle = function (this, writer, type, value)
      local default, serializer = VoidAccessoriesNetworking.SerializerMap.Serializers:TryGetValue(type)
      local success = default
      if not success then
        System.throw(System.Exception("There is no serializer for the type " .. type:getName() .. "!"))
      end

      serializer:Write(writer, value)
    end
    ReadSingle = function (this, reader, type)
      local default, serializer = VoidAccessoriesNetworking.SerializerMap.Serializers:TryGetValue(type)
      local success = default
      if not success then
        System.throw(System.Exception("There is no serializer for the type " .. type:getName() .. "!"))
      end

      return serializer:Read(reader)
    end
    RegisterSerializers = function ()
      VoidAccessoriesNetworking.SerializerMap.RegisterSerializer(System.String, Serializers.StringSerializer)
      VoidAccessoriesNetworking.SerializerMap.RegisterSerializer(System.Int32, Serializers.IntegerSerializer)
      VoidAccessoriesNetworking.SerializerMap.RegisterSerializer(System.UInt32, Serializers.UIntegerSerializer)
      VoidAccessoriesNetworking.SerializerMap.RegisterSerializer(VoidSharp.Color, Serializers.ColorSerializer)
      VoidAccessoriesNetworking.SerializerMap.RegisterSerializer(System.Boolean, Serializers.BoolSerializer)
      VoidAccessoriesNetworking.SerializerMap.RegisterSerializer(VoidSharpDarkRP.Job, Serializers.JobSerializer)
      VoidAccessoriesNetworking.SerializerMap.RegisterSerializer(System.DateTime, Serializers.DateTimeSerializer)
    end
    return {
      Write = Write,
      Read = Read,
      Read1 = Read1,
      WriteSingle = WriteSingle,
      ReadSingle = ReadSingle,
      RegisterSerializers = RegisterSerializers,
      __metadata__ = function (out)
        return {
          methods = {
            { "Read", 0x186, Read, System.Type, System.Object },
            { "Read", 0x10086, Read1, function (T) return T end },
            { "ReadSingle", 0x286, ReadSingle, out.VoidAccessories.Networking.NetworkReader, System.Type, System.Object },
            { "RegisterSerializers", 0xE, RegisterSerializers },
            { "Write", 0x10106, Write, function (T) return T end },
            { "WriteSingle", 0x306, WriteSingle, out.VoidAccessories.Networking.NetworkWriter, System.Type, System.Object }
          },
          class = { 0x6 }
        }
      end
    }
  end)
end)
