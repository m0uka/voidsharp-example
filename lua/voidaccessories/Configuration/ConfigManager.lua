-- Generated by CSharp.lua Compiler
local System = System
local Linq = System.Linq.Enumerable
local VoidAccessoriesConfiguration
local VoidAccessoriesModels
local VoidAccessoriesUtilities
System.import(function (out)
  VoidAccessoriesConfiguration = VoidAccessories.Configuration
  VoidAccessoriesModels = VoidAccessories.Models
  VoidAccessoriesUtilities = VoidAccessories.Utilities
end)
System.namespace("VoidAccessories.Configuration", function (namespace)
  namespace.class("ConfigManager", function (namespace)
    local GetConfigProperties, CreateEntries, InsertEntry, UpdateValue
    GetConfigProperties = function ()
      return System.typeof(VoidAccessoriesConfiguration.Config):GetProperties()
    end
    CreateEntries = function (database)
      return System.async(function (async, database)
        local configEntries = async:await(database:Select(VoidAccessoriesModels.ConfigEntry):ToList())
        local configProperties = GetConfigProperties()

        for _, property in System.each(configProperties) do
          local propertyName = property:getName()

          local configEntry = Linq.FirstOrDefault(configEntries, function (x)
            return x.Key == propertyName
          end) or async:await(InsertEntry(database, property))
          property:SetValue(nil, configEntry.Value)

          VoidAccessoriesUtilities.Logger.LogDebug("Loaded config entry " .. propertyName, "Config")
        end
      end, nil, database)
    end
    InsertEntry = function (database, propertyInfo)
      return System.async(function (async, database, propertyInfo)
        local default = VoidAccessoriesModels.ConfigEntry()
        default.Key = propertyInfo:getName()
        default.Value = propertyInfo:GetValue(nil, nil)
        local configEntry = default

        async:await(database:Insert(configEntry, VoidAccessoriesModels.ConfigEntry):Execute())
        return configEntry
      end, nil, database, propertyInfo)
    end
    -- <summary>
    -- Saves the configuration entry into the database.
    -- </summary>
    -- <param name="database">A database instance.</param>
    -- <param name="propertyInfo">The PropertyInfo of the configuration entry</param>
    -- <returns></returns>
    UpdateValue = function (database, propertyInfo)
      return System.async(function (async, database, propertyInfo)
        local configEntry = async:await(database:Select(VoidAccessoriesModels.ConfigEntry):Where("Key", "=", propertyInfo:getName()):getSingle())

        configEntry.Value = propertyInfo:GetValue(nil, nil)

        async:await(database:Update(configEntry, VoidAccessoriesModels.ConfigEntry):Execute())
      end, nil, database, propertyInfo)
    end
    return {
      CreateEntries = CreateEntries,
      UpdateValue = UpdateValue,
      __metadata__ = function (out)
        return {
          methods = {
            { "CreateEntries", 0x18E, CreateEntries, out.VoidAccessories.ORM.Database, System.Task },
            { "GetConfigProperties", 0x89, GetConfigProperties, System.Array(System.Reflection.PropertyInfo) },
            { "InsertEntry", 0x289, InsertEntry, out.VoidAccessories.ORM.Database, System.Reflection.PropertyInfo, System.Task },
            { "UpdateValue", 0x28E, UpdateValue, out.VoidAccessories.ORM.Database, System.Reflection.PropertyInfo, System.Task }
          },
          class = { 0xE }
        }
      end
    }
  end)
end)
