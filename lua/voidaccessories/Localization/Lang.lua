-- Generated by CSharp.lua Compiler
local System = System
local VoidAccessoriesLocalization
local DictStringLanguageDict
System.import(function (out)
  VoidAccessoriesLocalization = VoidAccessories.Localization
  DictStringLanguageDict = System.Dictionary(System.String, VoidAccessoriesLocalization.LanguageDict)
end)
System.namespace("VoidAccessories.Localization", function (namespace)
  namespace.class("Lang", function (namespace)
    local _currentLanguage, getCurrentLanguage, setCurrentLanguage, LoadLanguages, class
    getCurrentLanguage = function ()
      return _currentLanguage
    end
    setCurrentLanguage = function (value)
      local default, _ = class.Languages:TryGetValue(value)
      if not default then
        System.throw(System.Exception("Language " .. value .. " does not exist!"))
      end

      _currentLanguage = value
    end
    -- <summary>
    -- Loads the languages for the supplied addon.
    -- </summary>
    -- <param name="addonName">The name of the addon (global table has to match)</param>
    LoadLanguages = function (addonName)
      class.Languages = DictStringLanguageDict()

      local gTable = _G[addonName]
      for lang, phrases in pairs(gTable.Lang.Langs) do
          local languageDict = VoidAccessoriesLocalization.LanguageDict()
          for key, value in pairs(phrases) do
              languageDict:Add(key, value)
          end
          class.Languages:Add(lang, languageDict)
      end

      local phraseManager = VoidAccessoriesLocalization.PhraseManager()
      class.Phrases = phraseManager
    end
    class = {
      getCurrentLanguage = getCurrentLanguage,
      setCurrentLanguage = setCurrentLanguage,
      LoadLanguages = LoadLanguages,
      __metadata__ = function (out)
        return {
          fields = {
            { "_currentLanguage", 0x9, System.String }
          },
          properties = {
            { "CurrentLanguage", 0x10E, System.String, getCurrentLanguage, setCurrentLanguage },
            { "Languages", 0xE, System.Dictionary(System.String, out.VoidAccessories.Localization.LanguageDict) },
            { "Phrases", 0xE, out.VoidAccessories.Localization.PhraseManager }
          },
          methods = {
            { "LoadLanguages", 0x10E, LoadLanguages, System.String }
          },
          class = { 0xE }
        }
      end
    }
    return class
  end)
end)
